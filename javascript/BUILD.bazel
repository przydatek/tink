package(default_visibility = ["//:__subpackages__"])

licenses(["notice"])

# protos
load("@io_bazel_rules_closure//closure:defs.bzl", "closure_proto_library")

closure_proto_library(
    name = "common_closure_proto",
    deps = ["@tink//proto:common_proto"],
)

closure_proto_library(
    name = "tink_closure_proto",
    deps = ["@tink//proto:tink_proto"],
)

closure_proto_library(
    name = "config_closure_proto",
    deps = ["@tink//proto:config_proto"],
)

closure_proto_library(
    name = "aes_siv_closure_proto",
    deps = ["@tink//proto:aes_siv_proto"],
)

closure_proto_library(
    name = "rsa_ssa_pkcs1_closure_proto",
    deps = ["@tink//proto:rsa_ssa_pkcs1_proto"],
)

closure_proto_library(
    name = "rsa_ssa_pss_closure_proto",
    deps = ["@tink//proto:rsa_ssa_pss_proto"],
)

closure_proto_library(
    name = "ecdsa_closure_proto",
    deps = ["@tink//proto:ecdsa_proto"],
)

closure_proto_library(
    name = "ed25519_closure_proto",
    deps = ["@tink//proto:ed25519_proto"],
)

closure_proto_library(
    name = "aes_cmac_closure_proto",
    deps = ["@tink//proto:aes_cmac_proto"],
)

closure_proto_library(
    name = "hmac_closure_proto",
    deps = ["@tink//proto:hmac_proto"],
)

closure_proto_library(
    name = "aes_ctr_closure_proto",
    deps = ["@tink//proto:aes_ctr_proto"],
)

closure_proto_library(
    name = "aes_ctr_hmac_aead_closure_proto",
    deps = ["@tink//proto:aes_ctr_hmac_aead_proto"],
)

closure_proto_library(
    name = "aes_gcm_closure_proto",
    deps = ["@tink//proto:aes_gcm_proto"],
)

closure_proto_library(
    name = "aes_gcm_siv_closure_proto",
    deps = ["@tink//proto:aes_gcm_siv_proto"],
)

closure_proto_library(
    name = "aes_ctr_hmac_streaming_closure_proto",
    deps = ["@tink//proto:aes_ctr_hmac_streaming_proto"],
)

closure_proto_library(
    name = "aes_gcm_hkdf_streaming_closure_proto",
    deps = ["@tink//proto:aes_gcm_hkdf_streaming_proto"],
)

closure_proto_library(
    name = "aes_eax_closure_proto",
    deps = ["@tink//proto:aes_eax_proto"],
)

closure_proto_library(
    name = "chacha20_poly1305_closure_proto",
    deps = ["@tink//proto:chacha20_poly1305_proto"],
)

closure_proto_library(
    name = "kms_aead_closure_proto",
    deps = ["@tink//proto:kms_aead_proto"],
)

closure_proto_library(
    name = "kms_envelope_closure_proto",
    deps = ["@tink//proto:kms_envelope_proto"],
)

closure_proto_library(
    name = "ecies_aead_hkdf_closure_proto",
    deps = ["@tink//proto:ecies_aead_hkdf_proto"],
)

closure_proto_library(
    name = "xchacha20_poly1305_closure_proto",
    deps = ["@tink//proto:xchacha20_poly1305_proto"],
)

closure_proto_library(
    name = "hkdf_prf_closure_proto",
    deps = ["@tink//proto:hkdf_prf_proto"],
)

closure_proto_library(
    name = "prf_based_deriver_closure_proto",
    deps = ["@tink//proto:prf_based_deriver_proto"],
)

closure_proto_library(
    name = "empty_closure_proto",
    deps = ["@tink//proto:empty_proto"],
)


load("@io_bazel_rules_closure//closure:defs.bzl", "closure_js_binary", "closure_js_library")

closure_js_binary(
    name = "javascript_bin",
    visibility = ["//visibility:public"],
    deps = [":javascript"],
)

closure_js_library(
    name = "javascript",
    visibility = ["//visibility:public"],
    exports = [
        ":binary_reader",
        ":binary_writer",
        ":exports",
        ":key_manager",
        ":keyset_handle",
        ":primitives",
        ":readers_writers",
        ":registry",
    ],
)

closure_js_library(
    name = "exports",
    srcs = [
        "exports.js",
    ],
    deps = [
        ":binary_reader",
        ":binary_writer",
        ":crypto_format",
        ":key_manager",
        ":keyset_handle",
        ":primitive_set",
        ":primitive_wrapper",
        ":primitives",
        ":readers_writers",
        ":registry",
        "@io_bazel_rules_closure//closure/library",
    ],
)

closure_js_library(
    name = "primitives",
    srcs = [
        "aead.js",
        "hybrid_decrypt.js",
        "hybrid_encrypt.js",
        "mac.js",
        "public_key_sign.js",
        "public_key_verify.js",
    ],
    deps = [
        "//exception",
        "@io_bazel_rules_closure//closure/library",
    ],
)

closure_js_library(
    name = "binary_reader",
    srcs = [
        "binary_keyset_reader.js",
    ],
    deps = [
        ":readers_writers",
        "//exception",
        "//:tink_closure_proto",
        "@io_bazel_rules_closure//closure/library",
    ],
)

closure_js_library(
    name = "binary_writer",
    srcs = [
        "binary_keyset_writer.js",
    ],
    deps = [
        ":readers_writers",
        "//exception",
        "@io_bazel_rules_closure//closure/library",
    ],
)

closure_js_library(
    name = "readers_writers",
    srcs = [
        "keyset_reader.js",
        "keyset_writer.js",
    ],
    deps = [
        "//:tink_closure_proto",
        "@io_bazel_rules_closure//closure/library",
    ],
)

closure_js_library(
    name = "keyset_handle",
    srcs = [
        "keyset_handle.js",
    ],
    deps = [
        ":key_manager",
        ":primitive_set",
        ":primitives",
        ":readers_writers",
        ":registry",
        ":util",
        "//exception",
        "//subtle",
        "//:tink_closure_proto",
        "@io_bazel_rules_closure//closure/library",
    ],
)

closure_js_library(
    name = "cleartext_keyset_handle",
    srcs = [
        "cleartext_keyset_handle.js",
    ],
    deps = [
        ":keyset_handle",
        "//:tink_closure_proto",
        "@io_bazel_rules_closure//closure/library",
    ],
)

closure_js_library(
    name = "primitive_set",
    srcs = [
        "primitive_set.js",
    ],
    deps = [
        ":crypto_format",
        "//exception",
        "//:tink_closure_proto",
        "@io_bazel_rules_closure//closure/library",
    ],
)

closure_js_library(
    name = "key_manager",
    srcs = [
        "key_manager.js",
    ],
    deps = [
        "//exception",
        "//:tink_closure_proto",
        "@io_bazel_rules_closure//closure/library",
        "@io_bazel_rules_closure//closure/protobuf:jspb",
    ],
)

closure_js_library(
    name = "primitive_wrapper",
    srcs = [
        "primitive_wrapper.js",
    ],
    deps = [
        ":primitive_set",
        "@io_bazel_rules_closure//closure/library",
    ],
)

closure_js_library(
    name = "registry",
    srcs = [
        "registry.js",
    ],
    deps = [
        ":key_manager",
        ":primitive_set",
        ":primitive_wrapper",
        ":util",
        "//exception",
        "//:tink_closure_proto",
        "@io_bazel_rules_closure//closure/library",
        "@io_bazel_rules_closure//closure/protobuf:jspb",
    ],
)

closure_js_library(
    name = "crypto_format",
    srcs = [
        "crypto_format.js",
    ],
    deps = [
        "//exception",
        "//:tink_closure_proto",
        "@io_bazel_rules_closure//closure/library",
    ],
)

closure_js_library(
    name = "util",
    srcs = [
        "util.js",
    ],
    deps = [
        "//exception",
        "//subtle",
        "//:common_closure_proto",
        "//:tink_closure_proto",
        "@io_bazel_rules_closure//closure/library",
    ],
)

# test
